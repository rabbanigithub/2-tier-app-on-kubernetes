pipeline {
    agent any
    environment {
        SHA = sh(returnStdout: true, script: "git rev-parse --short=10 HEAD").trim()
    }
	
    stages {
        stage('Build Docker Image') {
            steps {
                sh "docker build -t rabbanidocker/app1:latest -t rabbanidocker/app1:${SHA} -f ./app1/build/Dockerfile ."
            }
        }
        stage('Push Docker Image') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'dockerHubCredential', usernameVariable: 'dockerHubUser', passwordVariable: 'dockerHubPass')]) {
                sh 'echo ${dockerHubPass} | docker login -u ${dockerHubUser} --password-stdin'
                }
                sh 'docker push rabbanidocker/app1:latest'
                sh 'docker push rabbanidocker/app1:${SHA}'
            }
        }
        stage('Deploy on k8s Cluster') {
            environment {
                createDir = 'mkdir -p /tmp/app1'
                k8sDeploy = 'kubectl apply -f /tmp/app1/'
                k8sImageUpdate = 'kubectl set image deployment/app1-deploy app1=rabbanidocker/app1:${SHA}'
            }
            steps {
                sshagent(['b3e9356b-6c02-4a33-9f13-b36c68367023']) {
                    sh "ssh -o StrictHostKeyChecking=no -p 2330 vagrant@172.20.4.63 ${createDir}"
                    sh "scp -o StrictHostKeyChecking=no -P 2330 ./app1/deploy/*.yaml vagrant@172.20.4.63:/tmp/app1/"
                    sh "ssh -o StrictHostKeyChecking=no -p 2330 vagrant@172.20.4.63 ${k8sDeploy}"
                    sh "ssh -o StrictHostKeyChecking=no -p 2330 vagrant@172.20.4.63 ${k8sImageUpdate}"
                }
            }
        }
    }
}